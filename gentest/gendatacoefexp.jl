include("../src/coefexp_ab.jl")

using Printf


function _printnumstr( num::BigFloat)
    str = @sprintf("%1.200e", num)
    println("parse(")
    println("    BigFloat," )
    println("    \"$(str[1:70])\" *")
    println("    \"$(str[71:140])\" *")
    println("    \"$(str[141:end])\"")
    print(") ")
end

function print_for_test(order, epsilon::Rational{BigInt}, n_tau, dt::Rational{BigInt})
    
    prec=precision(BigFloat)
    setprecision(1024)
    coef_tau = [collect(0:n_tau / 2 - 1); collect(-n_tau / 2:-1)]
    par = CoefExpAB(order, float(epsilon), coef_tau, float(dt) )
    ordp1=order+1
    println("# CoefExpAB order=$order epsilon=$epsilon n_tau =$n_tau dt=$dt")
    println("# tab_res_coef is AB coefficient for each value from 1 to n_tau")
    println("# this file is generated by gendatacoefexp.jl file")
    println("function get_coef_ab_for_test()")
    println("    tabres = zeros(Complex{BigFloat}, $ordp1, $ordp1, $n_tau)")
    for j = 1:ordp1
        println("    tabres[$j, :, :] .= [")
        for i = 1:ordp1
            print("    ")
            res = view(par.tab_coef, j, i, :)
            if i <= j
                for ell=1:n_tau
                    _printnumstr(real(res[ell]))
                    print("+ im * ")
                    _printnumstr(imag(res[ell]))
                end
            else
                print(" 0")
            end
            println("")
        end
        println("]")
    end
    println("    return tabres")
    println("end")
    setprecision(prec)
end

print_for_test(15, big"1"//10, 32, big"1"//10000)
